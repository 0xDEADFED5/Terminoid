# Copyright 2024 0xDEADFED5
#user  nobody;
worker_processes  3;
error_log  /var/log/openresty/error.log;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
	tcp_nodelay on;
	sendfile on;
    tcp_nopush on;
    keepalive_timeout  65;
	client_max_body_size 32M;
	gzip on;
	gzip_vary on;
	gzip_comp_level 6;
    gzip_min_length 1000;
	gzip_types  text/plain text/xml text/css application/x-javascript application/javascript 
	            application/ecmascript text/javascript application/json application/rss+xml 
				application/xml image/svg+xml application/x-font-ttf application/vnd.ms-fontobject image/x-icon;

    server {
        listen       80;
        server_name  localhost;

        location /visits {
			content_by_lua_block {
				local redis = require "resty.redis"
				local red = redis:new()
				red:set_timeouts(1000, 1000, 1000)
				local ok, err = red:connect("127.0.0.1", 6379)
				if not ok then
					ngx.log(ngx.ERR, "redis error: ", err)
                    ngx.status = ngx.HTTP_BAD_REQUEST
					red:set_keepalive(60000, 32)
					return
                end
				ok, err = red:incr("visits")
				if ok then
					ngx.say(ok)
				else
					ngx.log(ngx.ERR, "error getting visits from redis: ", err)
                    ngx.status = ngx.HTTP_BAD_REQUEST
				end
				red:set_keepalive(60000, 32)
			}
		}

		location /delete {
			content_by_lua_block {
				local redis = require "resty.redis"
				local red = redis:new()
				red:set_timeouts(1000, 1000, 1000)
				local function onError ()
					ngx.status = ngx.HTTP_BAD_REQUEST
					red:set_keepalive(60000, 32)
				end
				local ok, err = red:connect("127.0.0.1", 6379)
				if not ok then
					ngx.log(ngx.ERR, "redis error: ", err)
                    onError()
					return
                end
				local id = ngx.var.arg_id
				local key = ngx.var.arg_key
				if not id or not key then
					onError()
					ngx.log(ngx.ERR, "missing args! args: ", ngx.var.args)
					return
				end
				local cast_key = id .. "_cast" -- redis key for the asciicast file
				local pic_key = id .. "_pic" -- redis key for the PNG terminal capture
				local title_key = id .. "_title" -- redis key for title
				local desc_key = id .. "_desc" -- redis key for description
				local token_key = id .. "_token" -- redis key for the random number which will act as the access token for delete/modify
				local size_key = id .. "_size" -- redis key for size
				local error = false
				ok, err = red:get(token_key)
				if not ok or ok == ngx.null then
					ngx.log(ngx.ERR, "error getting token: ", token_key, " , error:", err)
                    onError()
					return
				else
					if ok == key then
						local ok1, err = red:del(cast_key)
						local ok2, err = red:del(pic_key)
						local ok3, err = red:del(title_key)
						local ok4, err = red:del(desc_key)
						local ok5, err = red:del(token_key)
						local ok6, err = red:del(size_key)
						if not ok1 or ok1 == ngx.null or not ok2 or ok2 == ngx.null or not ok3 or ok3 == ngx.null or not ok4 or ok4 == ngx.null or not ok5 or ok5 == ngx.null or not ok6 or ok6 == ngx.null then
							ngx.log(ngx.ERR, "error deleting key for this id: ", id, " , error: ", err)
							error = true
						end
						ok, err = red:zrem("views", id)
						if not ok then
							ngx.log(ngx.ERR, "error removing id from sorted set: ", id, " , error: ", err)
						end
					else
						onError()
						ngx.log(ngx.ERR, "wrong key for delete: ", key)
						return
					end
				end
				if error then
					onError()
					return
				end
				ngx.say("ok")
				red:set_keepalive(60000, 32)
			}
		}

		location /random {
			content_by_lua_block {
				local redis = require "resty.redis"
				local red = redis:new()
				red:set_timeouts(1000, 1000, 1000)
				local function onError ()
					ngx.status = ngx.HTTP_BAD_REQUEST
					red:set_keepalive(60000, 32)
				end
				local ok, err = red:connect("127.0.0.1", 6379)
				if not ok then
					onError()
					ngx.log(ngx.ERR, "redis error: ", err)
					return
                end
				local cache_time = 60 -- seconds to cache results
				ok, err = red:get("last_random_time")
				if ok ~= ngx.null then
					if ngx.now() - ok < cache_time then
						ok, err = red:get("random_cache")
						if not ok or ok == ngx.null then
							ngx.log(ngx.ERR, "error getting random_cache: ", err)
						else
							ngx.say(ok)
							red:set_keepalive(60000, 32)
							return
						end
					end
				end
				local cjson = require "cjson"
				-- if this command fails, you are running an old version of redis, build it from source, it is easy
				ok, err = red:zrandmember("views", 25, "WITHSCORES")
				if not ok or ok == ngx.null then
					ngx.log(ngx.ERR, "zrandmember error: ", err)
                    onError()
					return
				else
					local cast_key = nil
					local pic_key = nil
					local title_key = nil
					local desc_key = nil
					local size_key = nil
					local reply = {}
					-- pipeline these?
					for i = 1, #ok, 2 do
						local result = {}
						local id = ok[i]
						cast_key = id .. "_cast" -- redis key for the asciicast file
						pic_key = id .. "_pic" -- redis key for the PNG terminal capture
						title_key = id .. "_title" -- redis key for title
						desc_key = id .. "_desc" -- redis key for description
						size_key = id .. "_size" -- redis key for size
						local ok1, err = red:get(cast_key)
						local ok2, err = red:get(pic_key)
						local ok3, err = red:get(title_key)
						local ok4, err = red:get(desc_key)
						local ok5, err = red:get(size_key)
						if not ok1 or ok1 == ngx.null or not ok2 or ok2 == ngx.null or not ok3 or ok3 == ngx.null or not ok4 or ok4 == ngx.null or not ok5 or ok5 == ngx.null then
							onError()
							ngx.log(ngx.ERR, "error getting one or more keys for id: ", id)
							return
						end
						result["id"] = id
						result["cast"] = ok1
						result["pic"] = ok2
						result["title"] = ok3
						result["desc"] = ok4
						result["size"] = ok5
						result["views"] = ok[i + 1]
						table.insert(reply, result)
					end
					local json = cjson.encode(reply)
					ngx.say(json)
					red:set("last_random_time", ngx.now())
					red:set("random_cache", json)
					red:set_keepalive(60000, 32)
				end
			}
		}

		location /hot {
			content_by_lua_block {
				local redis = require "resty.redis"
				local red = redis:new()
				red:set_timeouts(1000, 1000, 1000)
				local function onError ()
					ngx.status = ngx.HTTP_BAD_REQUEST
					red:set_keepalive(60000, 32)
				end
				local ok, err = red:connect("127.0.0.1", 6379)
				if not ok then
					onError()
					ngx.log(ngx.ERR, "redis error: ", err)
					return
                end
				-- check to see if we should send cached value
				local cache_time = 600 -- seconds to cache results
				ok, err = red:get("last_hot_time")
				if ok ~= ngx.null then
					if ngx.now() - ok < cache_time then
						ok, err = red:get("hot_cache")
						if not ok or ok == ngx.null then
							ngx.log(ngx.ERR, "error getting hot_cache: ", err)
						else
							ngx.say(ok)
							red:set_keepalive(60000, 32)
							return
						end
					end
				end
				local cjson = require "cjson"
				-- search the sorted set by score, sort by highest score, limit 25, return the scores (views)
				-- if this command fails, you are running an old version of redis, build it from source, it is easy
				ok, err = red:zrange("views", math.huge, 0, "BYSCORE", "REV", "LIMIT", 0, 25, "WITHSCORES")
				--ok, err = red:zrevrangebyscore("views", math.huge, 0, "WITHSCORES", "LIMIT", 0, 25)
				local reply = {}
				if not ok or ok == ngx.null then
					onError()
					ngx.log(ngx.ERR, "error on zrange: ", err)
					return
					else
						local cast_key = nil
						local pic_key = nil
						local title_key = nil
						local desc_key = nil
						local size_key = nil
						-- pipeline these?
						for i = 1, #ok, 2 do
							local id = ok[i]
							local result = {}
							cast_key = id .. "_cast" -- redis key for the asciicast file
							pic_key = id .. "_pic" -- redis key for the PNG terminal capture
							title_key = id .. "_title" -- redis key for title
							desc_key = id .. "_desc" -- redis key for description
							size_key = id .. "_size" -- redis key for size
							local ok1, err = red:get(cast_key)
							local ok2, err = red:get(pic_key)
							local ok3, err = red:get(title_key)
							local ok4, err = red:get(desc_key)
							local ok5, err = red:get(size_key)
							if not ok1 or ok1 == ngx.null or not ok2 or ok2 == ngx.null or not ok3 or ok3 == ngx.null or not ok4 or ok4 == ngx.null or not ok5 or ok5 == ngx.null then
								ngx.log(ngx.ERR, "error getting one or more entries for id: ", id)
							end
							result["id"] = id
							result["cast"] = ok1
							result["pic"] = ok2
							result["title"] = ok3
							result["desc"] = ok4
							result["size"] = ok5
							result["views"] = ok[i + 1]
							table.insert(reply, result)
						end
				end
				local json = cjson.encode(reply)
				-- cache results and send them
				ngx.say(json)
				red:set("last_hot_time", ngx.now())
				red:set("hot_cache", json)
				red:set_keepalive(60000, 32)
			}
		}

		location /download {
			content_by_lua_block {
				local redis = require "resty.redis"
				local cjson = require "cjson"
				local red = redis:new()
				red:set_timeouts(1000, 1000, 1000)
				local function onError ()
					ngx.status = ngx.HTTP_BAD_REQUEST
					red:set_keepalive(60000, 32)
				end
				local id = ngx.var.arg_id
				if not id then
					onError()
					ngx.log(ngx.ERR, "no id! args: ", ngx.var.args)
					return
				end
				local cast_key = id .. "_cast" -- redis key for the asciicast file
				local pic_key = id .. "_pic" -- redis key for the PNG terminal capture
				local title_key = id .. "_title" -- redis key for title
				local desc_key = id .. "_desc" -- redis key for description
				local size_key = id .. "_size" -- redis key for size
				local ok, err = red:connect("127.0.0.1", 6379)
				if not ok then
					ngx.log(ngx.ERR, "redis error: ", err)
                    onError()
					return
                end
				local reply = {}
				ok, err = red:get(cast_key)
				if not ok or ok == ngx.null then
					ngx.log(ngx.ERR, "error getting cast from redis: ", cast_key, "error: ", err)
                    onError()
					return
				else
					reply["cast"] = ok
				end
				ok, err = red:get(pic_key)
				if not ok or ok == ngx.null then
					ngx.log(ngx.ERR, "error getting pic from redis: ", pic_key, "error: ", err)
                    onError()
					return
				else
					reply["pic"] = ok
				end
				ok, err = red:get(title_key)
				if not ok or ok == ngx.null then
					ngx.log(ngx.ERR, "error getting title from redis: ", title_key, "error: ", err)
                    onError()
					return
				else
					reply["title"] = ok
				end
				ok, err = red:get(desc_key)
				if not ok or ok == ngx.null then
					ngx.log(ngx.ERR, "error getting desc from redis: ", desc_key, "error: ", err)
                    onError()
					return
				else
					reply["desc"] = ok
				end
				ok, err = red:get(size_key)
				if not ok or ok == ngx.null then
					ngx.log(ngx.ERR, "error getting size from redis: ", size_key, "error: ", err)
                    onError()
					return
				else
					reply["size"] = ok
				end
				-- increment the view count in the sorted set
				-- this will autocreate keys, but since we made it this far, it must be a valid id
				-- getting a 1 back from redis would indicate freshly created key (an error)
				ok, err = red:zincrby("views", 1, id)
				if not ok or ok == ngx.null then
					ngx.log(ngx.ERR, "error getting views from redis for id: ", id, " , error: ", err)
                    onError()
					return
				else
					reply["views"] = ok
				end
				ngx.say(cjson.encode(reply))
				red:set_keepalive(60000, 32)
			}
		}
		location /upload {
            content_by_lua_block {
				local ffi = require("ffi")
				if not pcall(ffi.typeof, "struct timeval") then
					ffi.cdef[[
						typedef struct timeval {
							long tv_sec;
							long tv_usec;
						} timeval;

					int gettimeofday(struct timeval* t, void* tzp);
				]]
				end
				-- includes microseconds, use for random seed
				local gettimeofday_struct = ffi.new("struct timeval")
				local function gettimeofday()
					ffi.C.gettimeofday(gettimeofday_struct, nil)
					-- return tonumber(gettimeofday_struct.tv_sec) * 1000000 + tonumber(gettimeofday_struct.tv_usec)
					-- just get the significant digits:
					return tonumber(gettimeofday_struct.tv_sec) + tonumber(gettimeofday_struct.tv_usec)
				end
				local redis = require "resty.redis"
				local red = redis:new()
				red:set_timeouts(1000, 1000, 1000)
				math.randomseed(gettimeofday())
				local key = math.ceil(math.random() * 10^14)
				local id = math.ceil(math.random() * 10^14)
				local cast_key = id .. "_cast" -- redis key for the asciicast file
				local pic_key = id .. "_pic" -- redis key for the PNG terminal capture
				local title_key = id .. "_title" -- redis key title
				local desc_key = id .. "_desc" -- redis key for description
				local size_key = id .. "_size" -- redis key for size
				local token_key = id .. "_token" -- redis key for the random number which will act as the access token for delete/modify
				local function onError ()
					ngx.status = ngx.HTTP_BAD_REQUEST
					-- clean up redis keys that may been have been created
					red:del(cast_key)
					red:del(pic_key)
					red:del(title_key)
					red:del(desc_key)
					red:del(size_key)
					red:set_keepalive(60000, 32)
				end
				local ok, err = red:connect("127.0.0.1", 6379)
				if not ok then
					ngx.log(ngx.ERR, "redis error: ", err)
                    onError()
					return
                end
                local upload = require "resty.upload"
                local cjson = require "cjson"
                local chunk_size = 16384
                local form, err = upload:new(chunk_size)
                if not form then
                    ngx.log(ngx.ERR, "failed on new upload: ", err)
                    onError()
					return
                end
                form:set_timeout(1000)
				local chunks = 0
				local max_chunks = 1000
				ok, err = red:get(id)
				if ok ~= ngx.null then
					-- id already exists, this is bad
					ngx.log(ngx.ERR, "upload id collision, id: ", id)
                    onError()
					return
				end
				local h, err = ngx.req.get_headers()
				if not h then
					ngx.log(ngx.ERR, "failed to get headers: ", err)
                    onError()
                    return
				end
				if not h["n"] then
					ngx.log(ngx.ERR, "missing n header")
					onError()
					return
				end
				-- the other half of the most secure authentication system ever devised
				if h["n"] % 32323 ~= 0 then
					ngx.log(ngx.ERR, "incorrect n header")
					onError()
					return
				end
				-- limit uploads to 1 per minute per ip
				ok, err = red:get(ngx.var.remote_addr)
				if not ok or ok == ngx.null then
					ok, err = red:set(ngx.var.remote_addr, ngx.now())
					if not ok then
						ngx.log(ngx.ERR, "error setting ip/time key: ", err)
						return
					end
				else
					if ngx.now() - ok < 60 then
						ngx.log(ngx.ERR, "ip is trying to upload more often than allowed: ", ngx.var.remote_addr)
						--onError()
						--return
					end
				end
				local function sanitize (input)
					-- extremely fancy html sanitization
					local result = string.gsub(input, "&", "&#38;")
					result = string.gsub(result, "<", "&#60;")
					return result
				end
				local first = true
				local cast_seen = false
				local pic_seen = false
				local title_seen = false
				local desc_seen = false
				local size_seen = false
				local current_header = ""
				-- handle the upload
                while true do
                    local typ, res, err = form:read()
                    if not typ then
						ngx.log(ngx.ERR, "failed to read upload: ", err)
                        onError()
                        return
                    end
					if typ == "header" then
						first = true
						if res[2] == 'form-data; name="cast"' then
							cast_seen = true
							current_header = "cast"
						elseif res[2] == 'form-data; name="pic"' then
							pic_seen = true
							current_header = "pic"
						elseif res[2] == 'form-data; name="title"' then
							title_seen = true
							current_header = "title"
						elseif res[2] == 'form-data; name="desc"' then
							desc_seen = true
							current_header = "desc"
						elseif res[2] == 'form-data; name="size"' then
							size_seen = true
							current_header = "size"
						else
							current_header = "unknown"
							ngx.log(ngx.ERR, "unexpected header = ", res[2])
						end
					end
					-- sanity checks for uploads
					if typ == "body" then
						if first then
							if current_header == "cast" and res:byte(1) == 101 then
								-- matches first byte of base64 encoded deflate header
								first = false
							elseif current_header == "pic" and res:byte(1) == 100 then
								-- matches first byte of "data:image/png;base64 ..."
								first = false
							elseif current_header == "title" then
								first = false
							elseif current_header == "desc" then
								first = false
							elseif current_header == "size" then
								first = false
							else
								ngx.log(ngx.ERR, "invalid form, first byte = 0x", string.format("%x", res:byte(1)))
								onError()
								return
							end
						end
						if current_header == "cast" then
							red:append(cast_key, res)
						elseif current_header == "pic" then
							red:append(pic_key, res)
						elseif current_header == "size" then
							red:append(size_key, res)
						elseif current_header == "title" then
							if string.len(res) > 64 then
								-- this is checked in javascript, so this should not happen
								ngx.log(ngx.ERR, "title len > 64")
								onError()
								return
							end
							red:append(title_key, sanitize(res))
						elseif current_header == "desc" then
							if string.len(res) > 1024 then
								-- this is checked in javascript, so this should not happen
								ngx.log(ngx.ERR, "desc len > 1024")
								onError()
								return
							end
							red:append(desc_key, sanitize(res))
						end
					end
                    if typ == "eof" then
                        break
                    end
					-- cap upload size
					chunks = chunks + 1
					if chunks > max_chunks then
						ngx.log(ngx.ERR, "invalid file upload, too big")
						onError()
						return
					end
                end
				if not cast_seen or not pic_seen or not title_seen or not desc_seen or not size_seen then
					-- no upload form, or form was missing expected parts
					ngx.log(ngx.ERR, "invalid or incomplete upload")
                    onError()
					return
				end
				-- add upload id to a sorted set, this will be a cheap substitute for a database
				-- start it off at 1 so that if (zincrby 1) ever returns 1, we know it was just created (in error)
				ok, err = red:zadd("views", 1, id)
				if not ok or ok == ngx.null then
					ngx.log(ngx.ERR, "redis error adding id to sorted set. id: ", id, ", error: ", err)
                    onError()
					return
                end
				red:set(token_key, key)
				-- tell the browser that upload was okay, and here is id + key
				-- key is required to delete upload
				local reply = {}
				reply["id"] = id
				reply["key"] = key
				ngx.say(cjson.encode(reply))
				red:set(ngx.var.remote_addr, ngx.now())
				red:set_keepalive(60000, 32)
            }
        }
		
        location / {
            root   html;
            index  index.html;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
